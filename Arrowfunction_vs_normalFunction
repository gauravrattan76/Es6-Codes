// ES5
var obj = {
  id: 42,
  counter: function counter() {
    setTimeout(function() {
      console.log(this.id);
    }.bind(this), 1000);//we need explixt bind method to bind the this to the inner function data.
  }
};

// var ipl={
//    name :"gaurav",
//    greet:function(){
//       console.log(this.name);
//      setTimeout(function(){
//          console.log("set Interval function value-" + this.name);
//      },500);
//    }
// }


// ipl.greet();

var ipl={
    name :"gaurav",
    greet:function(){
       //var self = this;
      setTimeout(()=>{console.log("value from here- "  + this.name)},500);
    }
 }
 
 ES6 arrow functions canâ€™t be bound to a this keyword, so it will lexically go up a scope, and use the value of this in the scope in which it was defined.
 
 ipl.greet();
 
 
 this is not bound to anything, and will inherit the value of this from its parent scope.

var cat = {
  lives: 9,
  jumps: () => {
    this.lives--;
  }
}


